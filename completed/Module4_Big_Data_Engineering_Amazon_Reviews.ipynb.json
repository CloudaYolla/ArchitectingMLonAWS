{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Industrialized Analytics & MLOps  \n",
    "## Data Preparation in SageMaker Notebooks with SQL using AWS Athena. ML Using Comprehend NLP\n",
    "`(Revision History:\n",
    "PA5, 2019-10-!9, @akirmak: Comprehend NLP added for sentiment analysis\n",
    "PA4, 2019-10-!9, @akirmak: Scalable data prep using Glue, Athena & SageMaker\n",
    "`\n",
    "\n",
    "## Big Data & AI/ML\n",
    "**Data Lakes**\n",
    "The volume, velocity and variety of data has been ever increasing since the advent of the internet. The problem many enterprises face is managing this “big data” and trying to make sense out of it to yield the most desirable outcome. Siloes in enterprises, continuous ingestion of data in numerous formats, and the ever-changing technology landscape make it difficult to collect, store, share, analyze, and visualize data. The question is: How do you build that robust data pipeline that connects to the data store and provides data scientists and engineers a platform to gain insights into your data?\n",
    "\n",
    "Many organizations are starting to invest in a centralized data store and coming to understand the benefits of using Amazon Simple Storage Service (S3) as their data lake. Building a data pipeline from the data lake involves a data discovery process that includes identifying the data format and schema, cataloging the data, understanding the metadata to build table definitions, and providing the ability to query the data.\n",
    "\n",
    "This notebook post walks you through all the steps required to build the data pipeline—from creating a crawler for your data in Amazon S3 and using AWS Glue for data discovery and cataloging, to using Amazon Athena to store and retrieve table metadata, and Amazon SageMaker to query Athena tables.\n",
    "\n",
    "**Machine Learning**\n",
    "In today’s connected world, it’s important for companies to monitor social media channels to protect their brand and customer relationships. Companies try to learn about their customers, products, and services through social media, emails, and other communications. Machine learning (ML) models can help address some of these needs. However, the process to build and train your own model can be complicated and slow. The Amazon machine learning platform provides pre-trained models that can be accessed within Amazon SageMaker using a Jupyter Notebook. Amazon SageMaker is a fully managed end to end ML platform with modular design, but we will use only a hosted notebook instance for this example. Amazon Comprehend is a natural language processing (NLP) service that uses machine learning to find insights and relationships in text.\n",
    "\n",
    "Source: https://aws.amazon.com/blogs/machine-learning/run-sql-queries-from-your-sagemaker-notebooks-using-amazon-athena/\n",
    "\n",
    "\n",
    "### 0. Prerequisites\n",
    "\n",
    "#### 1. Crawl & Catalog Open Dataset\n",
    "Create a crawler for Amazon Reviews public dataset.\n",
    "\n",
    "\n",
    "1. Open the AWS Glue console and select Crawlers from the left navigation pane. Add a new crawler and give it a name. \n",
    "1. Next, in the Include Path field specify the S3 path to your Parquet data that we outputted in the previous section. In the Exclude Patterns field add the following two patterns: _metadata & _common_metadata\n",
    "    - Include path\ts3://amazon-reviews-pds/parquet/\n",
    "    - Exclude patterns\tmetadata, _common_metadata\n",
    "1. Choose Next, and when asked to add another data store leave it on No and choose Next.  \n",
    "1. Select an existing IAM role or create a new one and choose Next. \n",
    "1. You can leave the Frequency as Run on demand because we’ll run this only once. \n",
    "1. On the next page in the console you are asked to select or create a Database to keep tables created by the crawler. Go ahead and create one or use the default. Additionally, you can give your table name a Prefix since table names are generated for you to avoid possible name collisions.  \n",
    "1. Finally, click Next, and then Finish. \n",
    "1. Put a check mark next to your crawler in the main crawler window and choose Run Crawler. \n",
    "1. After the crawler completes its task you’ll have a new table in your Data Catalog. It should look something like this:\n",
    "\n",
    "\n",
    "As data source provide following URL:\n",
    "\n",
    "`s3://amazon-reviews-pds/tsv`\n",
    "\n",
    "For more information on AWS Reviews public open dataset \n",
    "Refer to : https://s3.amazonaws.com/amazon-reviews-pds/readme.html\n",
    "\n",
    "The dataset is currently available in two file formats.\n",
    "\n",
    "Tab separated value (TSV), a text format - s3://amazon-reviews-pds/tsv/\n",
    "Parquet, an optimized columnar binary format - s3://amazon-reviews-pds/parquet/\n",
    "To further improve query performance the Parquet dataset is partitioned (divided into subfolders) on S3 by product_category. This allows for queries using a WHERE clause on product_category to only read data specific to that category.\n",
    "\n",
    "#### 2. Permissions\n",
    "**Important** Make sure, the IAM role attached to sagemaker notebook has 'Athena + Comprehend full access'\n",
    "\n",
    "### 0. Getting started\n",
    "\n",
    "This notebook uses Pyhton3 kernel\n",
    "\n",
    "<TBD>\n",
    "\n",
    "We will write a script that:\n",
    "\n",
    "1. TBD\n",
    "\n",
    "Some concepts:\n",
    "\n",
    "- Spark provides a unified platform for writing big data applications, ranging from simple data loading and SQL queries to machine learning and streaming computation over the same engine and with a consistent set of APIs.\n",
    "- Spark handles loading data from Amazon S3. \n",
    "- You control your Spark Application through a driver process called the SparkSession.\n",
    "- A Spark DataFrame is the most common Structured API and simply represents a table of data with rows and columns. (Not to be confused with R and Python DataFrames. Those (with some exceptions) exist on one machine rather than multiple machines)\n",
    "- Schema is the list that defines the columns and types within those columns.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Install PyAthena\n",
    "\n",
    "Amazon SageMaker provides several kernels for Jupyter including support for Python 2 and 3, MXNet, TensorFlow, and PySpark. Choose Python as the kernel for this exercise as it comes with the Pandas library built in. Within the notebook, execute the following commands to install the Athena JDBC driver. PyAthena is a Python DB API 2.0 (PEP 249) compliant client for the Amazon Athena JDBC driver."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting PyAthena\n",
      "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/0b/77/827bff8322ffef1a0451bb6f10f85e8d3b4c40cb5386cb683c9e78700355/PyAthena-1.10.4-py2.py3-none-any.whl (48kB)\n",
      "\u001b[K    100% |████████████████████████████████| 51kB 29.9MB/s ta 0:00:01\n",
      "\u001b[?25hRequirement already satisfied: botocore>=1.5.52 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from PyAthena) (1.15.24)\n",
      "Requirement already satisfied: boto3>=1.4.4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from PyAthena) (1.12.24)\n",
      "Collecting future (from PyAthena)\n",
      "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/45/0b/38b06fd9b92dc2b68d58b75f900e97884c45bedd2ff83203d933cf5851c9/future-0.18.2.tar.gz (829kB)\n",
      "\u001b[K    100% |████████████████████████████████| 829kB 30.6MB/s ta 0:00:01\n",
      "\u001b[?25hCollecting tenacity>=4.1.0 (from PyAthena)\n",
      "  Downloading https://files.pythonhosted.org/packages/9a/30/4d1205370f249f6e3ff0d29f8eb3aebfb7f88bf925364a222c6abcbc383e/tenacity-6.1.0-py2.py3-none-any.whl\n",
      "Requirement already satisfied: jmespath<1.0.0,>=0.7.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from botocore>=1.5.52->PyAthena) (0.9.4)\n",
      "Requirement already satisfied: python-dateutil<3.0.0,>=2.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from botocore>=1.5.52->PyAthena) (2.7.3)\n",
      "Requirement already satisfied: urllib3<1.26,>=1.20; python_version != \"3.4\" in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from botocore>=1.5.52->PyAthena) (1.23)\n",
      "Requirement already satisfied: docutils<0.16,>=0.10 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from botocore>=1.5.52->PyAthena) (0.14)\n",
      "Requirement already satisfied: s3transfer<0.4.0,>=0.3.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from boto3>=1.4.4->PyAthena) (0.3.3)\n",
      "Requirement already satisfied: six>=1.9.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from tenacity>=4.1.0->PyAthena) (1.11.0)\n",
      "Building wheels for collected packages: future\n",
      "  Running setup.py bdist_wheel for future ... \u001b[?25ldone\n",
      "\u001b[?25h  Stored in directory: /home/ec2-user/.cache/pip/wheels/8b/99/a0/81daf51dcd359a9377b110a8a886b3895921802d2fc1b2397e\n",
      "Successfully built future\n",
      "Installing collected packages: future, tenacity, PyAthena\n",
      "Successfully installed PyAthena-1.10.4 future-0.18.2 tenacity-6.1.0\n",
      "\u001b[33mYou are using pip version 10.0.1, however version 20.0.2 is available.\n",
      "You should consider upgrading via the 'pip install --upgrade pip' command.\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "!{sys.executable} -m pip install PyAthena"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Query dataset on S3 using Athena\n",
    "\n",
    "You can use the JDBC connection to connect to Athena and populate the Pandas data frames. For data scientists, working with data is typically divided into multiple stages: munging and cleaning data, analyzing / modeling it, then organizing the results of the analysis into a form suitable for plotting or tabular display. Pandas is the ideal tool for all of these tasks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from pyathena import connect\n",
    "import pandas as pd\n",
    "conn = connect(s3_staging_dir='s3://hbaawsops-lz/athenaqresults/',\n",
    "               region_name='us-east-1')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>marketplace</th>\n",
       "      <th>customer_id</th>\n",
       "      <th>review_id</th>\n",
       "      <th>product_id</th>\n",
       "      <th>product_parent</th>\n",
       "      <th>product_title</th>\n",
       "      <th>star_rating</th>\n",
       "      <th>helpful_votes</th>\n",
       "      <th>total_votes</th>\n",
       "      <th>vine</th>\n",
       "      <th>verified_purchase</th>\n",
       "      <th>review_headline</th>\n",
       "      <th>review_body</th>\n",
       "      <th>review_date</th>\n",
       "      <th>year</th>\n",
       "      <th>product_category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>US</td>\n",
       "      <td>16439457</td>\n",
       "      <td>RTP8B70WFVEAB</td>\n",
       "      <td>B00FFINFM2</td>\n",
       "      <td>218020461</td>\n",
       "      <td>TurboTax Business Fed and Efile 2013</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>Worse than their products for Individuals</td>\n",
       "      <td>Maybe I just had too many expectations.&lt;br /&gt;I...</td>\n",
       "      <td>2014-04-10</td>\n",
       "      <td>2014</td>\n",
       "      <td>Digital_Software</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>US</td>\n",
       "      <td>18171562</td>\n",
       "      <td>R1XEO4NYQ0RD4Y</td>\n",
       "      <td>B009G6SEKM</td>\n",
       "      <td>440579914</td>\n",
       "      <td>Adobe Photoshop Elements 11</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>Very good software</td>\n",
       "      <td>Both programs perform excellently and APE11 se...</td>\n",
       "      <td>2013-07-12</td>\n",
       "      <td>2013</td>\n",
       "      <td>Digital_Software</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>US</td>\n",
       "      <td>10787611</td>\n",
       "      <td>R1X65MS9H1YXZY</td>\n",
       "      <td>B00H9A60O4</td>\n",
       "      <td>608720080</td>\n",
       "      <td>Avast Free Antivirus 2015 [Download]</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>Didn't catch any viruses or malware</td>\n",
       "      <td>After downloading it on my son's computer it d...</td>\n",
       "      <td>2014-04-10</td>\n",
       "      <td>2014</td>\n",
       "      <td>Digital_Software</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  marketplace customer_id       review_id  product_id product_parent  \\\n",
       "0          US    16439457   RTP8B70WFVEAB  B00FFINFM2      218020461   \n",
       "1          US    18171562  R1XEO4NYQ0RD4Y  B009G6SEKM      440579914   \n",
       "2          US    10787611  R1X65MS9H1YXZY  B00H9A60O4      608720080   \n",
       "\n",
       "                          product_title  star_rating  helpful_votes  \\\n",
       "0  TurboTax Business Fed and Efile 2013            2              0   \n",
       "1           Adobe Photoshop Elements 11            5              1   \n",
       "2  Avast Free Antivirus 2015 [Download]            1              0   \n",
       "\n",
       "   total_votes vine verified_purchase  \\\n",
       "0            0    N                 Y   \n",
       "1            1    N                 Y   \n",
       "2            0    N                 Y   \n",
       "\n",
       "                             review_headline  \\\n",
       "0  Worse than their products for Individuals   \n",
       "1                         Very good software   \n",
       "2        Didn't catch any viruses or malware   \n",
       "\n",
       "                                         review_body review_date  year  \\\n",
       "0  Maybe I just had too many expectations.<br />I...  2014-04-10  2014   \n",
       "1  Both programs perform excellently and APE11 se...  2013-07-12  2013   \n",
       "2  After downloading it on my son's computer it d...  2014-04-10  2014   \n",
       "\n",
       "   product_category  \n",
       "0  Digital_Software  \n",
       "1  Digital_Software  \n",
       "2  Digital_Software  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bigdata = pd.read_sql(\"SELECT * FROM amazon_reviews.parquet limit 100000;\", conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "marketplace          object\n",
       "customer_id          object\n",
       "review_id            object\n",
       "product_id           object\n",
       "product_parent       object\n",
       "product_title        object\n",
       "star_rating           int64\n",
       "helpful_votes         int64\n",
       "total_votes           int64\n",
       "vine                 object\n",
       "verified_purchase    object\n",
       "review_headline      object\n",
       "review_body          object\n",
       "review_date          object\n",
       "year                  int64\n",
       "product_category     object\n",
       "dtype: object"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bigdata.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(100000, 16)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bigdata.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>marketplace</th>\n",
       "      <th>customer_id</th>\n",
       "      <th>review_id</th>\n",
       "      <th>product_id</th>\n",
       "      <th>product_parent</th>\n",
       "      <th>product_title</th>\n",
       "      <th>star_rating</th>\n",
       "      <th>helpful_votes</th>\n",
       "      <th>total_votes</th>\n",
       "      <th>vine</th>\n",
       "      <th>verified_purchase</th>\n",
       "      <th>review_headline</th>\n",
       "      <th>review_body</th>\n",
       "      <th>review_date</th>\n",
       "      <th>year</th>\n",
       "      <th>product_category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>66500</th>\n",
       "      <td>US</td>\n",
       "      <td>15203590</td>\n",
       "      <td>R1ZMHNI3XP9UL6</td>\n",
       "      <td>B000VTW3KA</td>\n",
       "      <td>979642005</td>\n",
       "      <td>GE Cafe : CGS980SEMSS 30 Free Standing Gas Ran...</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Professional Chef, love this stove</td>\n",
       "      <td>This stove is wonderful.  I read reviews that ...</td>\n",
       "      <td>2012-07-25</td>\n",
       "      <td>2012</td>\n",
       "      <td>Major_Appliances</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63478</th>\n",
       "      <td>US</td>\n",
       "      <td>25036805</td>\n",
       "      <td>R3SY9V4ODU12OQ</td>\n",
       "      <td>B004LLIKY2</td>\n",
       "      <td>918740469</td>\n",
       "      <td>Amazon eGift Card - Amazon Kindle</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>Shopping for \"Free.\"</td>\n",
       "      <td>I love having money at my finger tips when I w...</td>\n",
       "      <td>2014-07-30</td>\n",
       "      <td>2014</td>\n",
       "      <td>Gift_Card</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2952</th>\n",
       "      <td>US</td>\n",
       "      <td>16942457</td>\n",
       "      <td>R3W0D1P62UHQRY</td>\n",
       "      <td>B00E7X9RUK</td>\n",
       "      <td>109813655</td>\n",
       "      <td>Quicken Deluxe 20</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>I no longer use Qucken 2014 because of all of ...</td>\n",
       "      <td>DON'T BUY IT! I spend everyday trying to figur...</td>\n",
       "      <td>2014-09-08</td>\n",
       "      <td>2014</td>\n",
       "      <td>Digital_Software</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      marketplace customer_id       review_id  product_id product_parent  \\\n",
       "66500          US    15203590  R1ZMHNI3XP9UL6  B000VTW3KA      979642005   \n",
       "63478          US    25036805  R3SY9V4ODU12OQ  B004LLIKY2      918740469   \n",
       "2952           US    16942457  R3W0D1P62UHQRY  B00E7X9RUK      109813655   \n",
       "\n",
       "                                           product_title  star_rating  \\\n",
       "66500  GE Cafe : CGS980SEMSS 30 Free Standing Gas Ran...            5   \n",
       "63478                  Amazon eGift Card - Amazon Kindle            5   \n",
       "2952                                   Quicken Deluxe 20            1   \n",
       "\n",
       "       helpful_votes  total_votes vine verified_purchase  \\\n",
       "66500              1            2    N                 N   \n",
       "63478              0            0    N                 Y   \n",
       "2952               1            1    N                 Y   \n",
       "\n",
       "                                         review_headline  \\\n",
       "66500                 Professional Chef, love this stove   \n",
       "63478                               Shopping for \"Free.\"   \n",
       "2952   I no longer use Qucken 2014 because of all of ...   \n",
       "\n",
       "                                             review_body review_date  year  \\\n",
       "66500  This stove is wonderful.  I read reviews that ...  2012-07-25  2012   \n",
       "63478  I love having money at my finger tips when I w...  2014-07-30  2014   \n",
       "2952   DON'T BUY IT! I spend everyday trying to figur...  2014-09-08  2014   \n",
       "\n",
       "       product_category  \n",
       "66500  Major_Appliances  \n",
       "63478         Gift_Card  \n",
       "2952   Digital_Software  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bigdata.sample(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting pixiedust\n",
      "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/16/ba/7488f06b48238205562f9d63aaae2303c060c5dfd63b1ddd3bd9d4656eb1/pixiedust-1.1.18.tar.gz (197kB)\n",
      "\u001b[K    100% |████████████████████████████████| 204kB 21.1MB/s ta 0:00:01\n",
      "\u001b[?25hCollecting mpld3 (from pixiedust)\n",
      "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/91/95/a52d3a83d0a29ba0d6898f6727e9858fe7a43f6c2ce81a5fe7e05f0f4912/mpld3-0.3.tar.gz (788kB)\n",
      "\u001b[K    100% |████████████████████████████████| 798kB 34.4MB/s ta 0:00:01\n",
      "\u001b[?25hRequirement already satisfied: lxml in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from pixiedust) (4.2.1)\n",
      "Collecting geojson (from pixiedust)\n",
      "  Downloading https://files.pythonhosted.org/packages/e4/8d/9e28e9af95739e6d2d2f8d4bef0b3432da40b7c3588fbad4298c1be09e48/geojson-2.5.0-py2.py3-none-any.whl\n",
      "Collecting astunparse (from pixiedust)\n",
      "  Downloading https://files.pythonhosted.org/packages/2b/03/13dde6512ad7b4557eb792fbcf0c653af6076b81e5941d36ec61f7ce6028/astunparse-1.6.3-py2.py3-none-any.whl\n",
      "Collecting markdown (from pixiedust)\n",
      "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ab/c4/ba46d44855e6eb1770a12edace5a165a0c6de13349f592b9036257f3c3d3/Markdown-3.2.1-py2.py3-none-any.whl (88kB)\n",
      "\u001b[K    100% |████████████████████████████████| 92kB 48.3MB/s ta 0:00:01\n",
      "\u001b[?25hCollecting colour (from pixiedust)\n",
      "  Downloading https://files.pythonhosted.org/packages/74/46/e81907704ab203206769dee1385dc77e1407576ff8f50a0681d0a6b541be/colour-0.1.5-py2.py3-none-any.whl\n",
      "Requirement already satisfied: requests in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from pixiedust) (2.20.0)\n",
      "Requirement already satisfied: six<2.0,>=1.6.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from astunparse->pixiedust) (1.11.0)\n",
      "Requirement already satisfied: wheel<1.0,>=0.23.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from astunparse->pixiedust) (0.31.1)\n",
      "Requirement already satisfied: setuptools>=36 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from markdown->pixiedust) (39.1.0)\n",
      "Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from requests->pixiedust) (3.0.4)\n",
      "Requirement already satisfied: idna<2.8,>=2.5 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from requests->pixiedust) (2.6)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from requests->pixiedust) (2019.11.28)\n",
      "Requirement already satisfied: urllib3<1.25,>=1.21.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from requests->pixiedust) (1.23)\n",
      "Building wheels for collected packages: pixiedust, mpld3\n",
      "  Running setup.py bdist_wheel for pixiedust ... \u001b[?25ldone\n",
      "\u001b[?25h  Stored in directory: /home/ec2-user/.cache/pip/wheels/e8/b1/86/c2f2e16e6bf9bfe556f9dbf8adb9f41816c476d73078c7d0eb\n",
      "  Running setup.py bdist_wheel for mpld3 ... \u001b[?25ldone\n",
      "\u001b[?25h  Stored in directory: /home/ec2-user/.cache/pip/wheels/c0/47/fb/8a64f89aecfe0059830479308ad42d62e898a3e3cefdf6ba28\n",
      "Successfully built pixiedust mpld3\n",
      "Installing collected packages: mpld3, geojson, astunparse, markdown, colour, pixiedust\n",
      "Successfully installed astunparse-1.6.3 colour-0.1.5 geojson-2.5.0 markdown-3.2.1 mpld3-0.3 pixiedust-1.1.18\n",
      "\u001b[33mYou are using pip version 10.0.1, however version 20.0.2 is available.\n",
      "You should consider upgrading via the 'pip install --upgrade pip' command.\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "!{sys.executable} -m pip install pixiedust"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pixiedust.display import *\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "pixiedust": {
     "displayParams": {
      "handlerId": "tableView",
      "table_nocount": "true",
      "table_noschema": "false",
      "table_nosearch": "false"
     }
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">.pd_warning{display:none;}</style><div class=\"pd_warning\"><em>Hey, there's something awesome here! To see it, open this notebook outside GitHub, in a viewer like Jupyter</em></div><style type=\"text/css\" class=\"pd_save is-viewer-good\">\n",
       "    .df-table-wrapper .panel-heading {\n",
       "      border-radius: 0;\n",
       "      padding: 0px;\n",
       "    }\n",
       "    .df-table-wrapper .panel-heading:hover {\n",
       "      border-color: #008571;\n",
       "    }\n",
       "    .df-table-wrapper .panel-title a {\n",
       "      background-color: #f9f9fb;\n",
       "      color: #333333;\n",
       "      display: block;\n",
       "      outline: none;\n",
       "      padding: 10px 15px;\n",
       "      text-decoration: none;\n",
       "    }\n",
       "    .df-table-wrapper .panel-title a:hover {\n",
       "      background-color: #337ab7;\n",
       "      border-color: #2e6da4;\n",
       "      color: #ffffff;\n",
       "      display: block;\n",
       "      padding: 10px 15px;\n",
       "      text-decoration: none;\n",
       "    }\n",
       "    .df-table-wrapper {\n",
       "      font-size: small;\n",
       "      font-weight: 300;\n",
       "      letter-spacing: 0.5px;\n",
       "      line-height: normal;\n",
       "      height: inherit;\n",
       "      overflow: auto;\n",
       "    }\n",
       "    .df-table-search {\n",
       "      margin: 0 0 20px 0;\n",
       "    }\n",
       "    .df-table-search-count {\n",
       "      display: inline-block;\n",
       "      margin: 0 0 20px 0;\n",
       "    }\n",
       "    .df-table-container {\n",
       "      max-height: 50vh;\n",
       "      max-width: 100%;\n",
       "      overflow-x: auto;\n",
       "      position: relative;\n",
       "    }\n",
       "    .df-table-wrapper table {\n",
       "      border: 0 none #ffffff;\n",
       "      border-collapse: collapse;\n",
       "      margin: 0;\n",
       "      min-width: 100%;\n",
       "      padding: 0;\n",
       "      table-layout: fixed;\n",
       "      height: inherit;\n",
       "      overflow: auto;\n",
       "    }\n",
       "    .df-table-wrapper tr.hidden {\n",
       "      display: none;\n",
       "    }\n",
       "    .df-table-wrapper tr:nth-child(even) {\n",
       "      background-color: #f9f9fb;\n",
       "    }\n",
       "    .df-table-wrapper tr.even {\n",
       "      background-color: #f9f9fb;\n",
       "    }\n",
       "    .df-table-wrapper tr.odd {\n",
       "      background-color: #ffffff;\n",
       "    }\n",
       "    .df-table-wrapper td + td {\n",
       "      border-left: 1px solid #e0e0e0;\n",
       "    }\n",
       "  \n",
       "    .df-table-wrapper thead,\n",
       "    .fixed-header {\n",
       "      font-weight: 600;\n",
       "    }\n",
       "    .df-table-wrapper tr,\n",
       "    .fixed-row {\n",
       "      border: 0 none #ffffff;\n",
       "      margin: 0;\n",
       "      padding: 0;\n",
       "    }\n",
       "    .df-table-wrapper th,\n",
       "    .df-table-wrapper td,\n",
       "    .fixed-cell {\n",
       "      border: 0 none #ffffff;\n",
       "      margin: 0;\n",
       "      min-width: 50px;\n",
       "      padding: 5px 20px 5px 10px;\n",
       "      text-align: left;\n",
       "      word-wrap: break-word;\n",
       "    }\n",
       "    .df-table-wrapper th {\n",
       "      padding-bottom: 0;\n",
       "      padding-top: 0;\n",
       "    }\n",
       "    .df-table-wrapper th div {\n",
       "      max-height: 1px;\n",
       "      visibility: hidden;\n",
       "    }\n",
       "  \n",
       "    .df-schema-field {\n",
       "      margin-left: 10px;\n",
       "    }\n",
       "  \n",
       "    .fixed-header-container {\n",
       "      overflow: hidden;\n",
       "      position: relative;\n",
       "    }\n",
       "    .fixed-header {\n",
       "      border-bottom: 2px solid #000;\n",
       "      display: table;\n",
       "      position: relative;\n",
       "    }\n",
       "    .fixed-row {\n",
       "      display: table-row;\n",
       "    }\n",
       "    .fixed-cell {\n",
       "      display: table-cell;\n",
       "    }\n",
       "  </style><div class=\"df-table-wrapper df-table-wrapper-1bc16913 panel-group pd_save is-viewer-good\">\n",
       "    <!-- dataframe schema -->\n",
       "    \n",
       "    <div class=\"panel panel-default\">\n",
       "      <div class=\"panel-heading\">\n",
       "        <h4 class=\"panel-title\" style=\"margin: 0px;\">\n",
       "          <a data-toggle=\"collapse\" href=\"#df-schema-1bc16913\" data-parent=\"#df-table-wrapper-1bc16913\">Schema</a>\n",
       "        </h4>\n",
       "      </div>\n",
       "      <div id=\"df-schema-1bc16913\" class=\"panel-collapse collapse\">\n",
       "        <div class=\"panel-body\" style=\"font-family: monospace;\">\n",
       "          <div class=\"df-schema-fields\">\n",
       "            <div>Field types:</div>\n",
       "            \n",
       "              <div class=\"df-schema-field\"><strong>marketplace: </strong> object</div>\n",
       "            \n",
       "              <div class=\"df-schema-field\"><strong>customer_id: </strong> object</div>\n",
       "            \n",
       "              <div class=\"df-schema-field\"><strong>review_id: </strong> object</div>\n",
       "            \n",
       "              <div class=\"df-schema-field\"><strong>product_id: </strong> object</div>\n",
       "            \n",
       "              <div class=\"df-schema-field\"><strong>product_parent: </strong> object</div>\n",
       "            \n",
       "              <div class=\"df-schema-field\"><strong>product_title: </strong> object</div>\n",
       "            \n",
       "              <div class=\"df-schema-field\"><strong>star_rating: </strong> int64</div>\n",
       "            \n",
       "              <div class=\"df-schema-field\"><strong>helpful_votes: </strong> int64</div>\n",
       "            \n",
       "              <div class=\"df-schema-field\"><strong>total_votes: </strong> int64</div>\n",
       "            \n",
       "              <div class=\"df-schema-field\"><strong>vine: </strong> object</div>\n",
       "            \n",
       "              <div class=\"df-schema-field\"><strong>verified_purchase: </strong> object</div>\n",
       "            \n",
       "              <div class=\"df-schema-field\"><strong>review_headline: </strong> object</div>\n",
       "            \n",
       "              <div class=\"df-schema-field\"><strong>review_body: </strong> object</div>\n",
       "            \n",
       "              <div class=\"df-schema-field\"><strong>review_date: </strong> object</div>\n",
       "            \n",
       "              <div class=\"df-schema-field\"><strong>year: </strong> int64</div>\n",
       "            \n",
       "              <div class=\"df-schema-field\"><strong>product_category: </strong> object</div>\n",
       "            \n",
       "          </div>\n",
       "        </div>\n",
       "      </div>\n",
       "    </div>\n",
       "    \n",
       "    <!-- dataframe table -->\n",
       "    <div class=\"panel panel-default\">\n",
       "      \n",
       "      <div class=\"panel-heading\">\n",
       "        <h4 class=\"panel-title\" style=\"margin: 0px;\">\n",
       "          <a data-toggle=\"collapse\" href=\"#df-table-1bc16913\" data-parent=\"#df-table-wrapper-1bc16913\"> Table</a>\n",
       "        </h4>\n",
       "      </div>\n",
       "      \n",
       "      <div id=\"df-table-1bc16913\" class=\"panel-collapse collapse in\">\n",
       "        <div class=\"panel-body\">\n",
       "          \n",
       "          <input type=\"text\" class=\"df-table-search form-control input-sm\" placeholder=\"Search table\">\n",
       "          \n",
       "          <div>\n",
       "            \n",
       "          </div>\n",
       "          <!-- fixed header for when dataframe table scrolls -->\n",
       "          <div class=\"fixed-header-container\">\n",
       "            <div class=\"fixed-header\">\n",
       "              <div class=\"fixed-row\">\n",
       "                \n",
       "                <div class=\"fixed-cell\">marketplace</div>\n",
       "                \n",
       "                <div class=\"fixed-cell\">customer_id</div>\n",
       "                \n",
       "                <div class=\"fixed-cell\">review_id</div>\n",
       "                \n",
       "                <div class=\"fixed-cell\">product_id</div>\n",
       "                \n",
       "                <div class=\"fixed-cell\">product_parent</div>\n",
       "                \n",
       "                <div class=\"fixed-cell\">product_title</div>\n",
       "                \n",
       "                <div class=\"fixed-cell\">star_rating</div>\n",
       "                \n",
       "                <div class=\"fixed-cell\">helpful_votes</div>\n",
       "                \n",
       "                <div class=\"fixed-cell\">total_votes</div>\n",
       "                \n",
       "                <div class=\"fixed-cell\">vine</div>\n",
       "                \n",
       "                <div class=\"fixed-cell\">verified_purchase</div>\n",
       "                \n",
       "                <div class=\"fixed-cell\">review_headline</div>\n",
       "                \n",
       "                <div class=\"fixed-cell\">review_body</div>\n",
       "                \n",
       "                <div class=\"fixed-cell\">review_date</div>\n",
       "                \n",
       "                <div class=\"fixed-cell\">year</div>\n",
       "                \n",
       "                <div class=\"fixed-cell\">product_category</div>\n",
       "                \n",
       "              </div>\n",
       "            </div>\n",
       "          </div>\n",
       "          <div class=\"df-table-container\">\n",
       "            <table class=\"df-table\">\n",
       "              <thead>\n",
       "                <tr>\n",
       "                  \n",
       "                  <th><div>marketplace</div></th>\n",
       "                  \n",
       "                  <th><div>customer_id</div></th>\n",
       "                  \n",
       "                  <th><div>review_id</div></th>\n",
       "                  \n",
       "                  <th><div>product_id</div></th>\n",
       "                  \n",
       "                  <th><div>product_parent</div></th>\n",
       "                  \n",
       "                  <th><div>product_title</div></th>\n",
       "                  \n",
       "                  <th><div>star_rating</div></th>\n",
       "                  \n",
       "                  <th><div>helpful_votes</div></th>\n",
       "                  \n",
       "                  <th><div>total_votes</div></th>\n",
       "                  \n",
       "                  <th><div>vine</div></th>\n",
       "                  \n",
       "                  <th><div>verified_purchase</div></th>\n",
       "                  \n",
       "                  <th><div>review_headline</div></th>\n",
       "                  \n",
       "                  <th><div>review_body</div></th>\n",
       "                  \n",
       "                  <th><div>review_date</div></th>\n",
       "                  \n",
       "                  <th><div>year</div></th>\n",
       "                  \n",
       "                  <th><div>product_category</div></th>\n",
       "                  \n",
       "                </tr>\n",
       "              </thead>\n",
       "              <tbody>\n",
       "                \n",
       "                <tr>\n",
       "                  \n",
       "                  <td>US</td>\n",
       "                  \n",
       "                  <td>52670295</td>\n",
       "                  \n",
       "                  <td>RGPOFKORD8RTU</td>\n",
       "                  \n",
       "                  <td>B0002CZPPG</td>\n",
       "                  \n",
       "                  <td>867256265</td>\n",
       "                  \n",
       "                  <td>Apple iTunes Prepaid Card ($15)</td>\n",
       "                  \n",
       "                  <td>5</td>\n",
       "                  \n",
       "                  <td>105</td>\n",
       "                  \n",
       "                  <td>107</td>\n",
       "                  \n",
       "                  <td>N</td>\n",
       "                  \n",
       "                  <td>N</td>\n",
       "                  \n",
       "                  <td>Excellent Gift Idea</td>\n",
       "                  \n",
       "                  <td>I wonder if the other reviewer actually read the agreement with the gift card: Apple does not take an extra 15 cents. It stays in your account and as you acquire more gift cards it accumulates. Up to two years if memory serves.<br><br>Anyway my daughter LOVES getting the cards. In fact she came to me to ask about doing chores to get iTunes. I gave her a list of chores and before she finished them I had her gift certificate printed out.<br><br>And gift shopping doesn't get any easier than this when you have a music lover recipient! You can email a gift certificate as well so you don't even have to pay for shipping!</td>\n",
       "                  \n",
       "                  <td>2005-02-08</td>\n",
       "                  \n",
       "                  <td>2005</td>\n",
       "                  \n",
       "                  <td>Gift_Card</td>\n",
       "                  \n",
       "                </tr>\n",
       "                \n",
       "                <tr>\n",
       "                  \n",
       "                  <td>US</td>\n",
       "                  \n",
       "                  <td>29964102</td>\n",
       "                  \n",
       "                  <td>R2U8X8V5KPB4J3</td>\n",
       "                  \n",
       "                  <td>B00H5BMF00</td>\n",
       "                  \n",
       "                  <td>373287760</td>\n",
       "                  \n",
       "                  <td>Amazon eGift Card - Froggy Birthday (Animated) [Hallmark]</td>\n",
       "                  \n",
       "                  <td>5</td>\n",
       "                  \n",
       "                  <td>0</td>\n",
       "                  \n",
       "                  <td>0</td>\n",
       "                  \n",
       "                  <td>N</td>\n",
       "                  \n",
       "                  <td>Y</td>\n",
       "                  \n",
       "                  <td>Five Stars</td>\n",
       "                  \n",
       "                  <td>convenience is the name of the game.</td>\n",
       "                  \n",
       "                  <td>2015-05-03</td>\n",
       "                  \n",
       "                  <td>2015</td>\n",
       "                  \n",
       "                  <td>Gift_Card</td>\n",
       "                  \n",
       "                </tr>\n",
       "                \n",
       "                <tr>\n",
       "                  \n",
       "                  <td>US</td>\n",
       "                  \n",
       "                  <td>48976105</td>\n",
       "                  \n",
       "                  <td>R2HG3WPSEY2KSF</td>\n",
       "                  \n",
       "                  <td>B0002CZPPG</td>\n",
       "                  \n",
       "                  <td>867256265</td>\n",
       "                  \n",
       "                  <td>Apple iTunes Prepaid Card ($15)</td>\n",
       "                  \n",
       "                  <td>1</td>\n",
       "                  \n",
       "                  <td>34</td>\n",
       "                  \n",
       "                  <td>54</td>\n",
       "                  \n",
       "                  <td>N</td>\n",
       "                  \n",
       "                  <td>Y</td>\n",
       "                  \n",
       "                  <td>Don't Buy From Amazon!</td>\n",
       "                  \n",
       "                  <td>Do NOT buy this item from Amazon - they charge shipping on it ($5.58). Go to target, circuit city, best buy or the Apple website. It is not available for the free shipping offer either.</td>\n",
       "                  \n",
       "                  <td>2005-07-22</td>\n",
       "                  \n",
       "                  <td>2005</td>\n",
       "                  \n",
       "                  <td>Gift_Card</td>\n",
       "                  \n",
       "                </tr>\n",
       "                \n",
       "                <tr>\n",
       "                  \n",
       "                  <td>US</td>\n",
       "                  \n",
       "                  <td>25173351</td>\n",
       "                  \n",
       "                  <td>R15XV3LXUMLTXL</td>\n",
       "                  \n",
       "                  <td>B00PG40CO4</td>\n",
       "                  \n",
       "                  <td>137115061</td>\n",
       "                  \n",
       "                  <td>Amazon eGift Card - Happy Birthday (Doughnuts)</td>\n",
       "                  \n",
       "                  <td>5</td>\n",
       "                  \n",
       "                  <td>0</td>\n",
       "                  \n",
       "                  <td>0</td>\n",
       "                  \n",
       "                  <td>N</td>\n",
       "                  \n",
       "                  <td>Y</td>\n",
       "                  \n",
       "                  <td>Birthday Gift</td>\n",
       "                  \n",
       "                  <td>This gift card was handled with accuracy in delivery date for my daughter-in-law for her birthday!</td>\n",
       "                  \n",
       "                  <td>2015-05-03</td>\n",
       "                  \n",
       "                  <td>2015</td>\n",
       "                  \n",
       "                  <td>Gift_Card</td>\n",
       "                  \n",
       "                </tr>\n",
       "                \n",
       "                <tr>\n",
       "                  \n",
       "                  <td>US</td>\n",
       "                  \n",
       "                  <td>12516181</td>\n",
       "                  \n",
       "                  <td>R3G6G7H8TX4H0T</td>\n",
       "                  \n",
       "                  <td>B0002CZPPG</td>\n",
       "                  \n",
       "                  <td>867256265</td>\n",
       "                  \n",
       "                  <td>Apple iTunes Prepaid Card ($15)</td>\n",
       "                  \n",
       "                  <td>5</td>\n",
       "                  \n",
       "                  <td>6</td>\n",
       "                  \n",
       "                  <td>6</td>\n",
       "                  \n",
       "                  <td>N</td>\n",
       "                  \n",
       "                  <td>N</td>\n",
       "                  \n",
       "                  <td>Love 'em.</td>\n",
       "                  \n",
       "                  <td>Gotta love these iTunes Prepaid Card thingys. They rock. <br>Problem is, my friends are getting a. bored, and b. overwhelmed with music because I buy too many of these when I need a quick present for a birthday or some kind of party. Great deal... and like A. Robinson said, iTunes doesn't take the extra $0.15 due to the $.99 per song. You get the $.15 stored in your gift card. And if you do the math, you can get a free song once you buy $84 more worth of gift cards. Hardly seems good, but it's still worth it. This is usually my first suggestion as a gift to anyone. Yes, we love music. Yes, we love Apple. Yes, we love iTunes Gift Cards.</td>\n",
       "                  \n",
       "                  <td>2005-10-15</td>\n",
       "                  \n",
       "                  <td>2005</td>\n",
       "                  \n",
       "                  <td>Gift_Card</td>\n",
       "                  \n",
       "                </tr>\n",
       "                \n",
       "              </tbody>\n",
       "            </table>\n",
       "          </div>\n",
       "        </div>\n",
       "      </div>\n",
       "    </div>\n",
       "  </div><script class=\"pd_save is-viewer-good\">\n",
       "    $(function() {\n",
       "      var tableWrapper = $('.df-table-wrapper-1bc16913');\n",
       "      var fixedHeader = $('.fixed-header', tableWrapper);\n",
       "      var tableContainer = $('.df-table-container', tableWrapper);\n",
       "      var table = $('.df-table', tableContainer);\n",
       "      var rows = $('tbody > tr', table);\n",
       "      var total = 5;\n",
       "  \n",
       "      fixedHeader\n",
       "        .css('width', table.width())\n",
       "        .find('.fixed-cell')\n",
       "        .each(function(i, e) {\n",
       "          $(this).css('width', $('.df-table-wrapper-1bc16913 th:nth-child(' + (i+1) + ')').css('width'));\n",
       "        });\n",
       "  \n",
       "      tableContainer.scroll(function() {\n",
       "        fixedHeader.css({ left: table.position().left });\n",
       "      });\n",
       "  \n",
       "      rows.on(\"click\", function(e){\n",
       "          // var txt = e.delegateTarget.innerText;\n",
       "          var splits = $(e.delegateTarget).text().trim().replace(/[\\n\\r]/g, '\\t').split(\"\\t\").map(function(item){return item.trim()}).filter(function(item){return item!=\"\"});\n",
       "          // var splits = txt.split(\"\\t\");\n",
       "          var len = splits.length;\n",
       "          var hdrs = $(fixedHeader).find(\".fixed-cell\");\n",
       "          // Add all cells in the selected row as a map to be consumed by the target as needed\n",
       "          var payload = {type:\"select\", targetDivId: \"\" };\n",
       "          for (var i = 0; i < len; i++) {\n",
       "            payload[hdrs[i].innerHTML] = splits[i];\n",
       "          }\n",
       "  \n",
       "          //simple selection highlighting, client adds \"selected\" class\n",
       "          $(this).addClass(\"selected\").siblings().removeClass(\"selected\");\n",
       "          $(document).trigger('pd_event', payload);\n",
       "      });\n",
       "  \n",
       "      $('.df-table-search', tableWrapper).keyup(function() {\n",
       "        var val = '^(?=.*\\\\b' + $.trim($(this).val()).split(/\\s+/).join('\\\\b)(?=.*\\\\b') + ').*$';\n",
       "        var reg = RegExp(val, 'i');\n",
       "        var index = 0;\n",
       "        \n",
       "        rows.each(function(i, e) {\n",
       "          if (!reg.test($(this).text().replace(/\\s+/g, ' '))) {\n",
       "            $(this).attr('class', 'hidden');\n",
       "          }\n",
       "          else {\n",
       "            $(this).attr('class', (++index % 2 == 0 ? 'even' : 'odd'));\n",
       "          }\n",
       "        });\n",
       "        $('.df-table-search-count', tableWrapper).html('Showing ' + index + ' of ' + total + ' rows');\n",
       "      });\n",
       "    });\n",
       "  \n",
       "    $(\".df-table-wrapper td:contains('http://')\").each(function(){var tc = this.textContent; $(this).wrapInner(\"<a target='_blank' href='\" + tc + \"'></a>\");});\n",
       "    $(\".df-table-wrapper td:contains('https://')\").each(function(){var tc = this.textContent; $(this).wrapInner(\"<a target='_blank' href='\" + tc + \"'></a>\");});\n",
       "  </script>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "display(df_bigdata.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Perform exploratory data analysis\n",
    "You can perform exploratory data analysis on the result dataset to answer important business questions. \n",
    "Let's find out the products with the highest star rating"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Products that generated highest star rating in the descending order: \n"
     ]
    }
   ],
   "source": [
    "print(\"Products that generated highest star rating in the descending order: \")\n",
    "\n",
    "df_topreviews = df_bigdata.groupby( by = 'product_title')['star_rating'].mean().sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "pixiedust": {
     "displayParams": {}
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "product_title\n",
       "✮ LED Pulse Bluetooth 4.0 Full Spectrum Smart Speaker! Tribe Wireless Indoor Outdoor Speaker, Built In Microphone For Answering Calls / Loud & Crystal Clear Full Range HD Sound ✮ With 5x 360 Degree Light Modes Millions Of Light Patterns / AUX, SD, TF Card Support, / 8 Hour Playtime Li-ion Battery / ✮ One Year Warranty!    5.0\n",
       "IGT Slots Garden Party                                                                                                                                                                                                                                                                                                              5.0\n",
       "ILEIBC233B - ILIVE iBC233B Bluetooth Boom Box                                                                                                                                                                                                                                                                                       5.0\n",
       "ILikeTronic CYClone 1G 1GB MP3,MP4,WMA, AVI Player with Expandable SD Card Slot and Outside Speaker (B1819)                                                                                                                                                                                                                         5.0\n",
       "ILoveHandles Elegant Wristband for iPod nano - Charcoal                                                                                                                                                                                                                                                                             5.0\n",
       "Name: star_rating, dtype: float64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_topreviews.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4. Save the data to Amazon S3\n",
    "Finally, you can save the results in a comma separated file (CSV) to Amazon S3. This allows you to reuse the  analysis results from Athena to build a business intelligence (BI) dashboard or to build other relevant machine learning models using Amazon SageMaker native algorithms."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to upload to S3\n",
    "from io import StringIO\n",
    "import boto3\n",
    "\n",
    "def write_pd_s3_csv(df, bucket, filepath):\n",
    "    csv_buffer = StringIO()\n",
    "    df_bigdata.to_csv(csv_buffer)\n",
    "    s3_resource = boto3.resource('s3')\n",
    "    s3_resource.Object(bucket, filepath).put(Body=csv_buffer.getvalue())\n",
    "    print(\"The data is successfully written to S3 path:\", bucket+\"/\"+filepath)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The data is successfully written to S3 path: prj-ml-lz/architecting-ml-aws/mod04-bigdata-ml/amazonreviewdata-highest-ranked-products.csv\n"
     ]
    }
   ],
   "source": [
    "# Write to S3\n",
    "s3_bucket =  'prj-ml-lz'  \n",
    "file_path = 'architecting-ml-aws/mod04-bigdata-ml/amazonreviewdata-highest-ranked-products.csv'\n",
    "write_pd_s3_csv(df_bigdata[['marketplace','product_id','product_title','star_rating','verified_purchase','product_category']], s3_bucket, file_path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Comprehend\n",
    "\n",
    "Amazon Comprehend takes your unstructured data such as social media posts, emails, webpages, documents, and transcriptions as input. Then it analyzes the input using the power of NLP algorithms to extract key phrases, entities, and sentiments automatically. It can also detect language of the input data and find relevant groupings of the data using topic modeling algorithms. \n",
    "\n",
    "**Important** Make sure, the IAM role attached to sagemaker notebook has 'Comprehend full access'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "import boto3 \n",
    "comprehend = boto3.client('comprehend', region_name='us-east-1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df_reviews = pd.read_sql(\"SELECT marketplace, \\\n",
    "        product_title, \\\n",
    "        review_body, \\\n",
    "        year, \\\n",
    "        product_category \\\n",
    "    FROM amazon_reviews.parquet \\\n",
    "    WHERE star_rating < 3  limit 500;\",\n",
    "                         conn)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "marketplace         object\n",
       "product_title       object\n",
       "review_body         object\n",
       "year                 int64\n",
       "product_category    object\n",
       "dtype: object"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_reviews.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>marketplace</th>\n",
       "      <th>product_title</th>\n",
       "      <th>review_body</th>\n",
       "      <th>year</th>\n",
       "      <th>product_category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>266</th>\n",
       "      <td>US</td>\n",
       "      <td>Amazon eGift Card - Smile</td>\n",
       "      <td>I expected a quick, easy way to give 4 gifts a...</td>\n",
       "      <td>2011</td>\n",
       "      <td>Gift_Card</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>390</th>\n",
       "      <td>US</td>\n",
       "      <td>Taylor #70204102 Lithium Electric Bath Scale</td>\n",
       "      <td>Purchased at Walmart at a good price.  On a po...</td>\n",
       "      <td>2004</td>\n",
       "      <td>Personal_Care_Appliances</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>467</th>\n",
       "      <td>US</td>\n",
       "      <td>WalkFit Orthotic Insoles SIZE F</td>\n",
       "      <td>The product is ok but was sent with a piece mi...</td>\n",
       "      <td>2006</td>\n",
       "      <td>Personal_Care_Appliances</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>311</th>\n",
       "      <td>US</td>\n",
       "      <td>Amazon.com eGift Cards</td>\n",
       "      <td>I did not get one!!!</td>\n",
       "      <td>2014</td>\n",
       "      <td>Gift_Card</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>US</td>\n",
       "      <td>Amazon eGift Card - Smile</td>\n",
       "      <td>I ordered a Kindle gift card for a friend to g...</td>\n",
       "      <td>2011</td>\n",
       "      <td>Gift_Card</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>315</th>\n",
       "      <td>US</td>\n",
       "      <td>Amazon.com Gift Card in a Greeting Card (Vario...</td>\n",
       "      <td>Company did not put message with my order so r...</td>\n",
       "      <td>2011</td>\n",
       "      <td>Gift_Card</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>US</td>\n",
       "      <td>Amazon.com Gift Card in a Greeting Card (Vario...</td>\n",
       "      <td>I only ordered one gift card.  Amazon sent two...</td>\n",
       "      <td>2014</td>\n",
       "      <td>Gift_Card</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>336</th>\n",
       "      <td>US</td>\n",
       "      <td>Amazon.com Gift Card in a Ornament Tin (Merry ...</td>\n",
       "      <td>Ordered as a Christmas gift arrived just as it...</td>\n",
       "      <td>2015</td>\n",
       "      <td>Gift_Card</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>263</th>\n",
       "      <td>US</td>\n",
       "      <td>Amazon.com $50 Gift Card in a Greeting Card (A...</td>\n",
       "      <td>Thought this was great deal but so far have be...</td>\n",
       "      <td>2011</td>\n",
       "      <td>Gift_Card</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>411</th>\n",
       "      <td>US</td>\n",
       "      <td>Dr. Joel Kaplan's Penis Enlargment Pumping Kit</td>\n",
       "      <td>I was given this as a gift from my girlfriend ...</td>\n",
       "      <td>2005</td>\n",
       "      <td>Personal_Care_Appliances</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    marketplace                                      product_title  \\\n",
       "266          US                          Amazon eGift Card - Smile   \n",
       "390          US       Taylor #70204102 Lithium Electric Bath Scale   \n",
       "467          US                    WalkFit Orthotic Insoles SIZE F   \n",
       "311          US                             Amazon.com eGift Cards   \n",
       "298          US                          Amazon eGift Card - Smile   \n",
       "315          US  Amazon.com Gift Card in a Greeting Card (Vario...   \n",
       "31           US  Amazon.com Gift Card in a Greeting Card (Vario...   \n",
       "336          US  Amazon.com Gift Card in a Ornament Tin (Merry ...   \n",
       "263          US  Amazon.com $50 Gift Card in a Greeting Card (A...   \n",
       "411          US     Dr. Joel Kaplan's Penis Enlargment Pumping Kit   \n",
       "\n",
       "                                           review_body  year  \\\n",
       "266  I expected a quick, easy way to give 4 gifts a...  2011   \n",
       "390  Purchased at Walmart at a good price.  On a po...  2004   \n",
       "467  The product is ok but was sent with a piece mi...  2006   \n",
       "311                               I did not get one!!!  2014   \n",
       "298  I ordered a Kindle gift card for a friend to g...  2011   \n",
       "315  Company did not put message with my order so r...  2011   \n",
       "31   I only ordered one gift card.  Amazon sent two...  2014   \n",
       "336  Ordered as a Christmas gift arrived just as it...  2015   \n",
       "263  Thought this was great deal but so far have be...  2011   \n",
       "411  I was given this as a gift from my girlfriend ...  2005   \n",
       "\n",
       "             product_category  \n",
       "266                 Gift_Card  \n",
       "390  Personal_Care_Appliances  \n",
       "467  Personal_Care_Appliances  \n",
       "311                 Gift_Card  \n",
       "298                 Gift_Card  \n",
       "315                 Gift_Card  \n",
       "31                  Gift_Card  \n",
       "336                 Gift_Card  \n",
       "263                 Gift_Card  \n",
       "411  Personal_Care_Appliances  "
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_reviews.sample(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Athena\n",
    "Alternatively, run this query on Athena\n",
    "\n",
    "`SELECT \"review_body\" FROM \"amzreviews\".\"reviews\" WHERE star_rating < 3  limit 10;`\n",
    "\n",
    "\n",
    "The item no 5 output is as follows:\n",
    "\n",
    "`Worst product that I've ever purchased from Amazon. Completely useless. Wish I had read the previous reviews before making my purchase. The mesh bag would not hold soap and the item went directly into the trash.`\n",
    "\n",
    "Let's see how Comprehend estimates tje"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_lowest_reviews = pd.read_sql(\"SELECT review_body FROM amazon_reviews.parquet WHERE star_rating < 3  limit 10;\", conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_body</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>I checked with my daughter in Australia, who w...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>We needed a gift that our relative  would want...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>This is April and I still cannot get the value...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>When sent thru Facebook the birthday girl coul...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>To restrictive to use. With the last one that ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>I am having difficulty with my Kindle. The fir...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>The reason I bought this card is because I hav...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>So, I received an email saying if I purchased ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>My recepient didn't like the fact that she had...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>I have had this phone for two months.  During ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         review_body\n",
       "0  I checked with my daughter in Australia, who w...\n",
       "1  We needed a gift that our relative  would want...\n",
       "2  This is April and I still cannot get the value...\n",
       "3  When sent thru Facebook the birthday girl coul...\n",
       "4  To restrictive to use. With the last one that ...\n",
       "5  I am having difficulty with my Kindle. The fir...\n",
       "6  The reason I bought this card is because I hav...\n",
       "7  So, I received an email saying if I purchased ...\n",
       "8  My recepient didn't like the fact that she had...\n",
       "9  I have had this phone for two months.  During ..."
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_lowest_reviews.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------- phrases ---------\n",
      "Worst product\n",
      "Amazon\n",
      "Wish I\n",
      "the previous reviews\n",
      "my purchase\n",
      "The mesh bag\n",
      "soap\n",
      "the item\n",
      "the trash\n",
      "------- entity : entity type ---------\n",
      "Amazon : ORGANIZATION\n",
      "------- sentiment ---------\n",
      "NEGATIVE\n"
     ]
    }
   ],
   "source": [
    "sample_review_body=\"Worst product that I've ever purchased from Amazon. Completely useless. Wish I had read the previous reviews before making my purchase. The mesh bag would not hold soap and the item went directly into the trash.\"   \n",
    "\n",
    "# Key phrases\n",
    "phrases = comprehend.detect_key_phrases(Text=sample_review_body, LanguageCode='en')\n",
    "\n",
    "# Entities\n",
    "entities = comprehend.detect_entities(Text=sample_review_body, LanguageCode='en')\n",
    "\n",
    "#Sentiments\n",
    "sentiments = comprehend.detect_sentiment(Text=sample_review_body, LanguageCode='en')\n",
    "\n",
    "\n",
    "# Print the phrases:\n",
    "print('------- phrases ---------')\n",
    "for i in range(0, len(phrases['KeyPhrases'])):\n",
    "    print((phrases['KeyPhrases'][i]['Text']))\n",
    "    \n",
    "\n",
    "# Print the entities with entitity type:\n",
    "print('------- entity : entity type ---------')\n",
    "for i in range(0, len(entities['Entities'])):\n",
    "    print(entities['Entities'][i]['Text'] + ' : ' + entities['Entities'][i]['Type'] )\n",
    "    \n",
    "# Print the sentiment:\n",
    "print('------- sentiment ---------')\n",
    "print(sentiments['Sentiment'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 8. Congratulations\n",
    "Congratulations! You've Finished this lab. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Putting it together\n",
    "Congratulations! You've Finished this lab. \n",
    "\n",
    "You have done data engineering tasks using Big Data Analytics, beyond the limitations of your notebook. \n",
    "\n",
    "- For more information, refer to AWS Blog [How to scale sentiment analysis using Amazon Comprehend, AWS Glue and Amazon Athena](https://aws.amazon.com/blogs/machine-learning/how-to-scale-sentiment-analysis-using-amazon-comprehend-aws-glue-and-amazon-athena/)\n",
    "\n",
    "Quote: \n",
    "\n",
    ">>\n",
    "At this point, you should be able to explore and visualize the data in whichever way you like. What should be clear from this lab is the way in which we constructed a data processing workflow using serverless technologies to clean, transform, enrich, query, and visualize large amounts of data quickly. Additionally, the method in which we were able to enrich our large dataset with Amazon Comprehend, the AWS NLP service, directly in our ETL job demonstrates a powerful pattern. This pattern can be applied to any AWS service, as well as other services, provided that the appropriate SDK is used. Another useful pattern I’ve learned by putting this pipeline together is that Amazon Athena comes in really handy when you need to inspect data because it is persisted to Amazon S3 at different stages of the pipeline.\" \n",
    "\n",
    "- For more information on serverless data lake concepts, refer to the other workshop prepared by the author [Serverless Data Lake Workshop](https://serverless-data-lake-immersionday.workshop.aws/en)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "conda_python3",
   "language": "python",
   "name": "conda_python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
